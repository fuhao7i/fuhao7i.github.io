I"ÅB<h1 id="1-‰øùÂ≠òÊ®°Âûã">1. ‰øùÂ≠òÊ®°Âûã</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="n">torch</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">state_dict</span><span class="p">(),</span><span class="s">"./Double.pth"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="2-Âä†ËΩΩËÆ≠ÁªÉÂ•ΩÁöÑÊ®°Âûã">2. Âä†ËΩΩËÆ≠ÁªÉÂ•ΩÁöÑÊ®°Âûã</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="c1"># ÂàõÂª∫Ê®°Âûã
</span><span class="n">model</span><span class="o">=</span><span class="n">Net</span><span class="p">()</span>
<span class="c1"># Âä†ËΩΩÈ¢ÑËÆ≠ÁªÉÊ®°ÂûãÁöÑÂèÇÊï∞
</span><span class="n">model</span><span class="p">.</span><span class="n">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">"./Double.pth"</span><span class="p">))</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h1 id="3-Êü•ÁúãËÆ≠ÁªÉÂ•ΩÁöÑÊ®°Âûã">3. Êü•ÁúãËÆ≠ÁªÉÂ•ΩÁöÑÊ®°Âûã</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">torch</span> 
<span class="n">content</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'/root/.cache/torch/hub/checkpoints/resnet50-19c8e357.pth'</span><span class="p">)</span>

<span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">content</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">content</span><span class="p">[</span><span class="n">key</span><span class="p">].</span><span class="n">size</span><span class="p">(),</span><span class="n">sep</span><span class="o">=</span><span class="s">'      '</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Êàñ</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="rouge-code"><pre><span class="kn">import</span> <span class="nn">torch</span>  <span class="c1"># ÂëΩ‰ª§Ë°åÊòØÈÄêË°åÁ´ãÂç≥ÊâßË°åÁöÑ
</span><span class="n">content</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'/root/.cache/torch/hub/checkpoints/resnet50-19c8e357.pth'</span><span class="p">)</span>

<span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">content</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span><span class="n">sep</span><span class="o">=</span><span class="s">'      '</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">result:</code></p>

<pre><code class="language-Bash">conv1.weight      torch.Size([64, 3, 7, 7])
bn1.running_mean      torch.Size([64])
bn1.running_var      torch.Size([64])
bn1.weight      torch.Size([64])
bn1.bias      torch.Size([64])
layer1.0.conv1.weight      torch.Size([64, 64, 1, 1])
layer1.0.bn1.running_mean      torch.Size([64])
layer1.0.bn1.running_var      torch.Size([64])
layer1.0.bn1.weight      torch.Size([64])
layer1.0.bn1.bias      torch.Size([64])
layer1.0.conv2.weight      torch.Size([64, 64, 3, 3])
layer1.0.bn2.running_mean      torch.Size([64])
layer1.0.bn2.running_var      torch.Size([64])
layer1.0.bn2.weight      torch.Size([64])
layer1.0.bn2.bias      torch.Size([64])
layer1.0.conv3.weight      torch.Size([256, 64, 1, 1])
layer1.0.bn3.running_mean      torch.Size([256])
layer1.0.bn3.running_var      torch.Size([256])
layer1.0.bn3.weight      torch.Size([256])
layer1.0.bn3.bias      torch.Size([256])
layer1.0.downsample.0.weight      torch.Size([256, 64, 1, 1])
layer1.0.downsample.1.running_mean      torch.Size([256])
layer1.0.downsample.1.running_var      torch.Size([256])
layer1.0.downsample.1.weight      torch.Size([256])
layer1.0.downsample.1.bias      torch.Size([256])
layer1.1.conv1.weight      torch.Size([64, 256, 1, 1])
layer1.1.bn1.running_mean      torch.Size([64])
layer1.1.bn1.running_var      torch.Size([64])
layer1.1.bn1.weight      torch.Size([64])
layer1.1.bn1.bias      torch.Size([64])
layer1.1.conv2.weight      torch.Size([64, 64, 3, 3])
layer1.1.bn2.running_mean      torch.Size([64])
layer1.1.bn2.running_var      torch.Size([64])
layer1.1.bn2.weight      torch.Size([64])
layer1.1.bn2.bias      torch.Size([64])
layer1.1.conv3.weight      torch.Size([256, 64, 1, 1])
layer1.1.bn3.running_mean      torch.Size([256])
layer1.1.bn3.running_var      torch.Size([256])
layer1.1.bn3.weight      torch.Size([256])
layer1.1.bn3.bias      torch.Size([256])
layer1.2.conv1.weight      torch.Size([64, 256, 1, 1])
layer1.2.bn1.running_mean      torch.Size([64])
layer1.2.bn1.running_var      torch.Size([64])
layer1.2.bn1.weight      torch.Size([64])
layer1.2.bn1.bias      torch.Size([64])
layer1.2.conv2.weight      torch.Size([64, 64, 3, 3])
layer1.2.bn2.running_mean      torch.Size([64])
layer1.2.bn2.running_var      torch.Size([64])
layer1.2.bn2.weight      torch.Size([64])
layer1.2.bn2.bias      torch.Size([64])
layer1.2.conv3.weight      torch.Size([256, 64, 1, 1])
layer1.2.bn3.running_mean      torch.Size([256])
layer1.2.bn3.running_var      torch.Size([256])
layer1.2.bn3.weight      torch.Size([256])
layer1.2.bn3.bias      torch.Size([256])
layer2.0.conv1.weight      torch.Size([128, 256, 1, 1])
layer2.0.bn1.running_mean      torch.Size([128])
layer2.0.bn1.running_var      torch.Size([128])
layer2.0.bn1.weight      torch.Size([128])
layer2.0.bn1.bias      torch.Size([128])
layer2.0.conv2.weight      torch.Size([128, 128, 3, 3])
layer2.0.bn2.running_mean      torch.Size([128])
layer2.0.bn2.running_var      torch.Size([128])
layer2.0.bn2.weight      torch.Size([128])
layer2.0.bn2.bias      torch.Size([128])
layer2.0.conv3.weight      torch.Size([512, 128, 1, 1])
layer2.0.bn3.running_mean      torch.Size([512])
layer2.0.bn3.running_var      torch.Size([512])
layer2.0.bn3.weight      torch.Size([512])
layer2.0.bn3.bias      torch.Size([512])
layer2.0.downsample.0.weight      torch.Size([512, 256, 1, 1])
layer2.0.downsample.1.running_mean      torch.Size([512])
layer2.0.downsample.1.running_var      torch.Size([512])
layer2.0.downsample.1.weight      torch.Size([512])
layer2.0.downsample.1.bias      torch.Size([512])
layer2.1.conv1.weight      torch.Size([128, 512, 1, 1])
layer2.1.bn1.running_mean      torch.Size([128])
layer2.1.bn1.running_var      torch.Size([128])
layer2.1.bn1.weight      torch.Size([128])
layer2.1.bn1.bias      torch.Size([128])
layer2.1.conv2.weight      torch.Size([128, 128, 3, 3])
layer2.1.bn2.running_mean      torch.Size([128])
layer2.1.bn2.running_var      torch.Size([128])
layer2.1.bn2.weight      torch.Size([128])
layer2.1.bn2.bias      torch.Size([128])
layer2.1.conv3.weight      torch.Size([512, 128, 1, 1])
layer2.1.bn3.running_mean      torch.Size([512])
layer2.1.bn3.running_var      torch.Size([512])
layer2.1.bn3.weight      torch.Size([512])
layer2.1.bn3.bias      torch.Size([512])
layer2.2.conv1.weight      torch.Size([128, 512, 1, 1])
layer2.2.bn1.running_mean      torch.Size([128])
layer2.2.bn1.running_var      torch.Size([128])
layer2.2.bn1.weight      torch.Size([128])
layer2.2.bn1.bias      torch.Size([128])
layer2.2.conv2.weight      torch.Size([128, 128, 3, 3])
layer2.2.bn2.running_mean      torch.Size([128])
layer2.2.bn2.running_var      torch.Size([128])
layer2.2.bn2.weight      torch.Size([128])
layer2.2.bn2.bias      torch.Size([128])
layer2.2.conv3.weight      torch.Size([512, 128, 1, 1])
layer2.2.bn3.running_mean      torch.Size([512])
layer2.2.bn3.running_var      torch.Size([512])
layer2.2.bn3.weight      torch.Size([512])
layer2.2.bn3.bias      torch.Size([512])
layer2.3.conv1.weight      torch.Size([128, 512, 1, 1])
layer2.3.bn1.running_mean      torch.Size([128])
layer2.3.bn1.running_var      torch.Size([128])
layer2.3.bn1.weight      torch.Size([128])
layer2.3.bn1.bias      torch.Size([128])
layer2.3.conv2.weight      torch.Size([128, 128, 3, 3])
layer2.3.bn2.running_mean      torch.Size([128])
layer2.3.bn2.running_var      torch.Size([128])
layer2.3.bn2.weight      torch.Size([128])
layer2.3.bn2.bias      torch.Size([128])
layer2.3.conv3.weight      torch.Size([512, 128, 1, 1])
layer2.3.bn3.running_mean      torch.Size([512])
layer2.3.bn3.running_var      torch.Size([512])
layer2.3.bn3.weight      torch.Size([512])
layer2.3.bn3.bias      torch.Size([512])
layer3.0.conv1.weight      torch.Size([256, 512, 1, 1])
layer3.0.bn1.running_mean      torch.Size([256])
layer3.0.bn1.running_var      torch.Size([256])
layer3.0.bn1.weight      torch.Size([256])
layer3.0.bn1.bias      torch.Size([256])
layer3.0.conv2.weight      torch.Size([256, 256, 3, 3])
layer3.0.bn2.running_mean      torch.Size([256])
layer3.0.bn2.running_var      torch.Size([256])
layer3.0.bn2.weight      torch.Size([256])
layer3.0.bn2.bias      torch.Size([256])
layer3.0.conv3.weight      torch.Size([1024, 256, 1, 1])
layer3.0.bn3.running_mean      torch.Size([1024])
layer3.0.bn3.running_var      torch.Size([1024])
layer3.0.bn3.weight      torch.Size([1024])
layer3.0.bn3.bias      torch.Size([1024])
layer3.0.downsample.0.weight      torch.Size([1024, 512, 1, 1])
layer3.0.downsample.1.running_mean      torch.Size([1024])
layer3.0.downsample.1.running_var      torch.Size([1024])
layer3.0.downsample.1.weight      torch.Size([1024])
layer3.0.downsample.1.bias      torch.Size([1024])
layer3.1.conv1.weight      torch.Size([256, 1024, 1, 1])
layer3.1.bn1.running_mean      torch.Size([256])
layer3.1.bn1.running_var      torch.Size([256])
layer3.1.bn1.weight      torch.Size([256])
layer3.1.bn1.bias      torch.Size([256])
layer3.1.conv2.weight      torch.Size([256, 256, 3, 3])
layer3.1.bn2.running_mean      torch.Size([256])
layer3.1.bn2.running_var      torch.Size([256])
layer3.1.bn2.weight      torch.Size([256])
layer3.1.bn2.bias      torch.Size([256])
layer3.1.conv3.weight      torch.Size([1024, 256, 1, 1])
layer3.1.bn3.running_mean      torch.Size([1024])
layer3.1.bn3.running_var      torch.Size([1024])
layer3.1.bn3.weight      torch.Size([1024])
layer3.1.bn3.bias      torch.Size([1024])
layer3.2.conv1.weight      torch.Size([256, 1024, 1, 1])
layer3.2.bn1.running_mean      torch.Size([256])
layer3.2.bn1.running_var      torch.Size([256])
layer3.2.bn1.weight      torch.Size([256])
layer3.2.bn1.bias      torch.Size([256])
layer3.2.conv2.weight      torch.Size([256, 256, 3, 3])
layer3.2.bn2.running_mean      torch.Size([256])
layer3.2.bn2.running_var      torch.Size([256])
layer3.2.bn2.weight      torch.Size([256])
layer3.2.bn2.bias      torch.Size([256])
layer3.2.conv3.weight      torch.Size([1024, 256, 1, 1])
layer3.2.bn3.running_mean      torch.Size([1024])
layer3.2.bn3.running_var      torch.Size([1024])
layer3.2.bn3.weight      torch.Size([1024])
layer3.2.bn3.bias      torch.Size([1024])
layer3.3.conv1.weight      torch.Size([256, 1024, 1, 1])
layer3.3.bn1.running_mean      torch.Size([256])
layer3.3.bn1.running_var      torch.Size([256])
layer3.3.bn1.weight      torch.Size([256])
layer3.3.bn1.bias      torch.Size([256])
layer3.3.conv2.weight      torch.Size([256, 256, 3, 3])
layer3.3.bn2.running_mean      torch.Size([256])
layer3.3.bn2.running_var      torch.Size([256])
layer3.3.bn2.weight      torch.Size([256])
layer3.3.bn2.bias      torch.Size([256])
layer3.3.conv3.weight      torch.Size([1024, 256, 1, 1])
layer3.3.bn3.running_mean      torch.Size([1024])
layer3.3.bn3.running_var      torch.Size([1024])
layer3.3.bn3.weight      torch.Size([1024])
layer3.3.bn3.bias      torch.Size([1024])
layer3.4.conv1.weight      torch.Size([256, 1024, 1, 1])
layer3.4.bn1.running_mean      torch.Size([256])
layer3.4.bn1.running_var      torch.Size([256])
layer3.4.bn1.weight      torch.Size([256])
layer3.4.bn1.bias      torch.Size([256])
layer3.4.conv2.weight      torch.Size([256, 256, 3, 3])
layer3.4.bn2.running_mean      torch.Size([256])
layer3.4.bn2.running_var      torch.Size([256])
layer3.4.bn2.weight      torch.Size([256])
layer3.4.bn2.bias      torch.Size([256])
layer3.4.conv3.weight      torch.Size([1024, 256, 1, 1])
layer3.4.bn3.running_mean      torch.Size([1024])
layer3.4.bn3.running_var      torch.Size([1024])
layer3.4.bn3.weight      torch.Size([1024])
layer3.4.bn3.bias      torch.Size([1024])
layer3.5.conv1.weight      torch.Size([256, 1024, 1, 1])
layer3.5.bn1.running_mean      torch.Size([256])
layer3.5.bn1.running_var      torch.Size([256])
layer3.5.bn1.weight      torch.Size([256])
layer3.5.bn1.bias      torch.Size([256])
layer3.5.conv2.weight      torch.Size([256, 256, 3, 3])
layer3.5.bn2.running_mean      torch.Size([256])
layer3.5.bn2.running_var      torch.Size([256])
layer3.5.bn2.weight      torch.Size([256])
layer3.5.bn2.bias      torch.Size([256])
layer3.5.conv3.weight      torch.Size([1024, 256, 1, 1])
layer3.5.bn3.running_mean      torch.Size([1024])
layer3.5.bn3.running_var      torch.Size([1024])
layer3.5.bn3.weight      torch.Size([1024])
layer3.5.bn3.bias      torch.Size([1024])
layer4.0.conv1.weight      torch.Size([512, 1024, 1, 1])
layer4.0.bn1.running_mean      torch.Size([512])
layer4.0.bn1.running_var      torch.Size([512])
layer4.0.bn1.weight      torch.Size([512])
layer4.0.bn1.bias      torch.Size([512])
layer4.0.conv2.weight      torch.Size([512, 512, 3, 3])
layer4.0.bn2.running_mean      torch.Size([512])
layer4.0.bn2.running_var      torch.Size([512])
layer4.0.bn2.weight      torch.Size([512])
layer4.0.bn2.bias      torch.Size([512])
layer4.0.conv3.weight      torch.Size([2048, 512, 1, 1])
layer4.0.bn3.running_mean      torch.Size([2048])
layer4.0.bn3.running_var      torch.Size([2048])
layer4.0.bn3.weight      torch.Size([2048])
layer4.0.bn3.bias      torch.Size([2048])
layer4.0.downsample.0.weight      torch.Size([2048, 1024, 1, 1])
layer4.0.downsample.1.running_mean      torch.Size([2048])
layer4.0.downsample.1.running_var      torch.Size([2048])
layer4.0.downsample.1.weight      torch.Size([2048])
layer4.0.downsample.1.bias      torch.Size([2048])
layer4.1.conv1.weight      torch.Size([512, 2048, 1, 1])
layer4.1.bn1.running_mean      torch.Size([512])
layer4.1.bn1.running_var      torch.Size([512])
layer4.1.bn1.weight      torch.Size([512])
layer4.1.bn1.bias      torch.Size([512])
layer4.1.conv2.weight      torch.Size([512, 512, 3, 3])
layer4.1.bn2.running_mean      torch.Size([512])
layer4.1.bn2.running_var      torch.Size([512])
layer4.1.bn2.weight      torch.Size([512])
layer4.1.bn2.bias      torch.Size([512])
layer4.1.conv3.weight      torch.Size([2048, 512, 1, 1])
layer4.1.bn3.running_mean      torch.Size([2048])
layer4.1.bn3.running_var      torch.Size([2048])
layer4.1.bn3.weight      torch.Size([2048])
layer4.1.bn3.bias      torch.Size([2048])
layer4.2.conv1.weight      torch.Size([512, 2048, 1, 1])
layer4.2.bn1.running_mean      torch.Size([512])
layer4.2.bn1.running_var      torch.Size([512])
layer4.2.bn1.weight      torch.Size([512])
layer4.2.bn1.bias      torch.Size([512])
layer4.2.conv2.weight      torch.Size([512, 512, 3, 3])
layer4.2.bn2.running_mean      torch.Size([512])
layer4.2.bn2.running_var      torch.Size([512])
layer4.2.bn2.weight      torch.Size([512])
layer4.2.bn2.bias      torch.Size([512])
layer4.2.conv3.weight      torch.Size([2048, 512, 1, 1])
layer4.2.bn3.running_mean      torch.Size([2048])
layer4.2.bn3.running_var      torch.Size([2048])
layer4.2.bn3.weight      torch.Size([2048])
layer4.2.bn3.bias      torch.Size([2048])
fc.weight      torch.Size([1000, 2048])
fc.bias      torch.Size([1000])
</code></pre>

<h1 id="-ÂºïÁî®">#. ÂºïÁî®</h1>

<ol>
  <li><a href="https://zhuanlan.zhihu.com/p/137562717">PyTorch‰ΩøÁî®È¢ÑËÆ≠ÁªÉÊ®°Âûã(‰øùÂ≠òÔºåÂä†ËΩΩÔºåÂä†ËΩΩÈÉ®ÂàÜÔºåÂÜªÁªìÊüê‰∫õÂèÇÊï∞Ôºå‰øÆÊîπÁΩëÁªúÊüê‰∫õÂ±ÇÁ≠â‚Ä¶)</a></li>
</ol>
:ET